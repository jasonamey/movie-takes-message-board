// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    testPassword  String?
    accounts      Account[]
    sessions      Session[]
    takes         Take[]
    votes         Vote[]
    comment       Comment[]
    Reply         Reply[]
}

model Take {
    id          String    @id @default(cuid())
    title       String
    content     String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    author      User      @relation(fields: [authorId], references: [id])
    authorId    String
    comments    Comment[]
    votes       Vote[]
    genre       String
    status      String
    movieId     String
    movie       Movie     @relation(fields: [movieId], references: [id])
    releaseYear String?
}

model Movie {
    id          String @id @default(uuid())
    budget      Int
    releaseDate String
    revenue     Int
    posterPath  String
    tagline     String
    title       String
    runtime     Int
    take        Take[]
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    take      Take     @relation(fields: [takeId], references: [id])
    takeId    String
    commentId String?
    Reply     Reply[]
}

model Reply {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String
}

model Vote {
    user   User   @relation(fields: [userId], references: [id])
    userId String
    take   Take   @relation(fields: [takeId], references: [id], onDelete: Cascade)
    takeId String

    @@id([userId, takeId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
